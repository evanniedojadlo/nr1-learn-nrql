import AggregateQuery from "../lessons/AggregateQuery";
import TimeRange from "../lessons/TimeRange";
import Timeseries from "../lessons/Timeseries";
import Where from "../lessons/Where";
import Facet from "../lessons/Facet";
import NextSteps from "../lessons/NextSteps";

const translate = {
  Welcome: {
    Title: "ようこそ",
    Contents: {
      P1: `
        NRQLチュートリアルにようこそ! 簡単なチュートリアルを通して、皆様ご利用中のアカウントを実際に利用し、
        NRQLの使い方に慣れていきましょう。もうすでにNRQLのベテランですか？
        このチュートリアルではNRQLを利用していくためのコツや技をご紹介していますので、ぜひこの機会に振り返っていただければと
        思います。4段階のレベルを通過していくことで、NRQLのスキルを身に付けていってください。
  `
      ,
      P2: `
        NRQL は <1>New Relic Query Language</1>の略記です。（ヌルクル、ナーコゥ、エヌアールキューエルなどと発音しています。）
        Metric、Event、Log、そしてTraceのデータがペタバイト級に保存されているNRDBから、リアルタイムにアクセス可能です。
  `,
      P3: `
        NRDBはNew Relicの誇るTelemetry Data Platformのデータベースです.
        世界で最もパワフルなマルチテナントのテレメトリデータベースです。
  `,
      P4: `このレッスンでのデータについて`,
      P5: `
        New Relic One の Telemetry Data Platformでは、素早く、簡単に多くの集合に対してクエリできます。
        しかし便宜上、このチュートリアルでは多くのお客様がご利用中のAPMトランザクションのデータを利用していきます。
        <1>１つ以上のアカウントをご利用中の場合、APMを利用できるアカウントに切り替えて進めてください。</1>
      `,
      P6: `
      このチュートリアルで学んでいく全てのクエリは皆様が管理されているデータを元にしており、そのままダッシュボード作成にも利用できます。
      実際のライブデータに基づいて学習しテストていけるということです。
      やることは一つ全ての例の近くにある"Try this query"リンクをクリックするだけです。
      それではさっそく学んでいきましょう！
      `
    }
  },
  "Your first query": {
    Title: `初めてのクエリ`,
    Contents: {
      P1: `
        まず、New Relic APMで収集される、<2>Transaction</2>イベントをみていきましょう。
        `
      ,
      P2: `
        すべてのNRQLクエリは、<1>SELECT</1>と<3>FROM</3> を持たなければなりません。
        <6>FROM</6>でデータがどこにあるのかを指定し、データを<8>SELECT</8>します。
        `,
      P3: `
       Transactionイベントの全ての情報を取得する簡単なクエリから始めましょう。
       (SQL を知っている人なら、NRQL は身近に感じるはずです)。
       `,
      P4: `
    多くの結果が返ってきたと思います。それぞれのレコードには、タイムスタンプと<1>属性</1>
    の情報が入っています。今私たちが欲しいのは１レコードだけなので、<4>LIMIT 1</4>
    を使用して制限しましょう。
    `,
      P5: `
    <1>LIMIT</1>が指定されていない場合は、デフォルトが使用されます。
    <3>SELECT *</3> のクエリについては 100行、
    <5>FACET</5> を使ったクエリや<7>SELECT (attributes)</7> で指定した集約クエリの場合は
    集約情報10個となっています。
    この制限は、最大まで任意の数を指定することができます。最大数を返すには、<8>LIMIT MAX</8>を使用します。
    `,
      P6: `
      これで、結果の量をコントロールできるようになりました それでは、特定の属性だけみたい場合にはどうすれば良いのでしょうか。
      SQLのようにたった数文字を変更するだけで。指定した属性のみを取得できます。
      <3>*</3>を欲しい属性の名称に変更するだけです。この例ではトランザクション名と処理時間を表示しています。
  `,
      P7: `
    それでは、クエリの下にあるリンクをクリックして、チャートビルダーで自由に試してみましょう！
  `,
      P8: `授業のまとめ`,
      P9: `
    素晴らしいスタートが切れました。あなたは基本的なクエリを二つ覚えました。
    一つ目に、全ての属性及び特定の属性だけをクエリできるようになりました。
    二つ目に、返される結果の行数を制御できるようになりました。順調です！
  `
    }
  },
  "Aggregating data":{
    Title: "データの集約",
    Contents: {
      P1: `
        一つ一つのイベントの情報を見るのではなく、イベントを集約し概要を把握するのが一般的です。
        そしてこれこそがNRDBの腕の見せ所です。NRDBは、何十億ものイベントをスキャンし、
        瞬時にリアルタイムであなたのデータにアクセスできます。
        `,
      P2: `
        例えば、各<1>Transaction</1> イベントには<3>duration</3>属性があります。この属性は
        トランザクションの実行時間です。それでは、全ての<6>Transaction</6>イベントの
        <7>average</7>(平均実行時間)をみてみましょう。
        `,
      P3: `
         NRQLには、イベントデータを集約するために使用できる多くの組み込み関数があります。
         使用できる一般的な関数には、<1>max()</1>、
         <4>min()</4>、<6>median()</6>、<8>percentile()</8>があります。
      `,
      P4: `
          次の例では、過去60分間のうち一番遅かったイベントをクエリします。
      `,
      P5: `
          そのためには、<1>max(duration)</1>を使いましょう。
      `,
      P6: `
          注意: クエリのデフォルトの検索期間は、直近の 60 分です。
      `,
      P7: `
          これで、直近の60分間で最も遅かったカスタマーエクスペリエンスがどれだけの時間を要したかがわかりました。
          次に、最速のものを確認してみましょう。<1>min(duration)</1>としてください。
      `,
      P8: `
          ご覧のように、<1>max()</1>と<3>min()</3>はどちらも興味深いデータポイントでした。
          これに加え、算術を実行したい場合もあります。<5>sum()</5>は数値属性に有効で、
          合計を確認できます。
          新しい属性<1>databaseCallCount</1>を利用してみましょう。この属性は
          各トランザクションが行ったデータベースへのコール回数です。これを合計することで、
          直近60分間で発生したデータベースコール数の総和がわかります。
          (アプリがデータベースと通信しない場合、これは 0 になります)。
      `,
      P9: `
          最後に、<1>Transaction</1>に記録された全てのイベントをカウントすることもできます。
          <4>count(*)</4> を使います。
          以下のクエリは、アカウント内にある全てのNew Relic APMを導入しているサービスのイベント総和です。
      `,
      P10: `授業のまとめ`,
      P11: `
          今、私たちは非常に興味深いことをしています。私たちは、
          パフォーマンスの境界、イベントデータのグループ化、さらには選択した属性に関する情報を計算しました。
          `,
      P12: `
          そして<1>duration</1>を使い、<4>average</4>、<6>max</6>、<8>min</8>を確認しました。
          最後に私たちは数値属性の総和を求める<8>sum</8>と、イベントの総数を確認する<10>count</10>を使いました。 
`,
      P13: `
          このようにデータを操作しビジュアル化することで、
          パフォーマンスの問題を発見するのに役立ちます。
          `
    }
  },
  "Time ranges":{},
  "Where clauses": {},
  "Faceted queries": {},
  "Summary": {}
}
export default translate;
